<launch>
    <!-- Launch the nodelet manager for pcl -->
    <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

    <!-- Cropbox filtering to filter out points outside the CropBox -->
    <node pkg="nodelet" type="nodelet" name="cropbox" args="load pcl/CropBox pcl_manager" output="screen">
        <remap from="~input" to="/velodyne_points" />
        <remap from="~output" to="/velodyne_points/cropbox" />
        <rosparam>
            <!-- input_frame: base_link -->
            <!-- output_frame: velodyne -->
            min_x: -10.0
            max_x: 10.0
            min_y: -10.0
            max_y: 10.0
            min_z: -0.32
            max_z: 0.112
        </rosparam>
    </node>

    <!-- Voxel downsampling to produce a less dense point cloud -->
    <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
        <remap from="~input" to="/velodyne_points/cropbox" />
        <remap from="~output" to="/velodyne_points/voxelgrid" />
        <rosparam>
            filter_field_name: z
            filter_limit_min: -0.32
            filter_limit_max: 0.112
            filter_limit_negative: False
            leaf_size: 0.025
        </rosparam>
    </node>

    <node pkg="tf" type="static_transform_publisher" name="velodyne_to_front_laser" args="0 0 0 0 0 0 /velodyne /front_laser 100" />

    <!-- Transfer 3D pointcloud data to 2D laserscan data -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="/velodyne_points/voxelgrid"/>
        <remap from="scan" to="/front/scan"/>
        <rosparam>
            transform_tolerance: 0.01
            min_height: -5.0
            max_height: 5.0

            angle_min: -3.1415
            angle_max: 3.1415
            angle_increment: 0.01
            scan_time: 0.1
            range_min: 0.0
            range_max: 10.0
            use_inf: true
            concurrency_level: 0
        </rosparam>
    </node>

</launch>
